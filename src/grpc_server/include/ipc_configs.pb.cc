// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc_configs.proto

#include "ipc_configs.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR request_data::request_data(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.image_data_)*/ nullptr,
      /*decltype(_impl_.car_transform_)*/ nullptr,
      /*decltype(_impl_.bev_bounding_box_cord_)*/ nullptr,
    } {}
struct request_dataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR request_dataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~request_dataDefaultTypeInternal() {}
  union {
    request_data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 request_dataDefaultTypeInternal _request_data_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR image_request::image_request(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct image_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR image_requestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~image_requestDefaultTypeInternal() {}
  union {
    image_request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 image_requestDefaultTypeInternal _image_request_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR transform_request::transform_request(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_.z_)*/ 0,
      /*decltype(_impl_.pitch_)*/ 0,
      /*decltype(_impl_.yaw_)*/ 0,
      /*decltype(_impl_.roll_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct transform_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR transform_requestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~transform_requestDefaultTypeInternal() {}
  union {
    transform_request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 transform_requestDefaultTypeInternal _transform_request_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BEV_bounding_box_cord_request::BEV_bounding_box_cord_request(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.left_bottom_x_)*/ 0,
      /*decltype(_impl_.left_bottom_y_)*/ 0,
      /*decltype(_impl_.left_top_x_)*/ 0,
      /*decltype(_impl_.left_top_y_)*/ 0,
      /*decltype(_impl_.right_top_x_)*/ 0,
      /*decltype(_impl_.right_top_y_)*/ 0,
      /*decltype(_impl_.right_bottom_x_)*/ 0,
      /*decltype(_impl_.right_bottom_y_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct BEV_bounding_box_cord_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BEV_bounding_box_cord_requestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BEV_bounding_box_cord_requestDefaultTypeInternal() {}
  union {
    BEV_bounding_box_cord_request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BEV_bounding_box_cord_requestDefaultTypeInternal _BEV_bounding_box_cord_request_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR empty_return::empty_return(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.result_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct empty_returnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR empty_returnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~empty_returnDefaultTypeInternal() {}
  union {
    empty_return _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 empty_returnDefaultTypeInternal _empty_return_default_instance_;
static ::_pb::Metadata file_level_metadata_ipc_5fconfigs_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ipc_5fconfigs_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ipc_5fconfigs_2eproto = nullptr;
const ::uint32_t TableStruct_ipc_5fconfigs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::request_data, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::request_data, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::request_data, _impl_.image_data_),
    PROTOBUF_FIELD_OFFSET(::request_data, _impl_.car_transform_),
    PROTOBUF_FIELD_OFFSET(::request_data, _impl_.bev_bounding_box_cord_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::image_request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::image_request, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::transform_request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::transform_request, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::transform_request, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::transform_request, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::transform_request, _impl_.pitch_),
    PROTOBUF_FIELD_OFFSET(::transform_request, _impl_.yaw_),
    PROTOBUF_FIELD_OFFSET(::transform_request, _impl_.roll_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::BEV_bounding_box_cord_request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::BEV_bounding_box_cord_request, _impl_.left_bottom_x_),
    PROTOBUF_FIELD_OFFSET(::BEV_bounding_box_cord_request, _impl_.left_bottom_y_),
    PROTOBUF_FIELD_OFFSET(::BEV_bounding_box_cord_request, _impl_.left_top_x_),
    PROTOBUF_FIELD_OFFSET(::BEV_bounding_box_cord_request, _impl_.left_top_y_),
    PROTOBUF_FIELD_OFFSET(::BEV_bounding_box_cord_request, _impl_.right_top_x_),
    PROTOBUF_FIELD_OFFSET(::BEV_bounding_box_cord_request, _impl_.right_top_y_),
    PROTOBUF_FIELD_OFFSET(::BEV_bounding_box_cord_request, _impl_.right_bottom_x_),
    PROTOBUF_FIELD_OFFSET(::BEV_bounding_box_cord_request, _impl_.right_bottom_y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::empty_return, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::empty_return, _impl_.result_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::request_data)},
        {14, -1, -1, sizeof(::image_request)},
        {23, -1, -1, sizeof(::transform_request)},
        {37, -1, -1, sizeof(::BEV_bounding_box_cord_request)},
        {53, -1, -1, sizeof(::empty_return)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_request_data_default_instance_._instance,
    &::_image_request_default_instance_._instance,
    &::_transform_request_default_instance_._instance,
    &::_BEV_bounding_box_cord_request_default_instance_._instance,
    &::_empty_return_default_instance_._instance,
};
const char descriptor_table_protodef_ipc_5fconfigs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021ipc_configs.proto\"\234\001\n\014request_data\022\"\n\n"
    "image_data\030\001 \001(\0132\016.image_request\022)\n\rcar_"
    "transform\030\002 \001(\0132\022.transform_request\022=\n\025B"
    "EV_bounding_box_cord\030\003 \001(\0132\036.BEV_boundin"
    "g_box_cord_request\"\035\n\rimage_request\022\014\n\004d"
    "ata\030\001 \003(\002\"^\n\021transform_request\022\t\n\001x\030\001 \001("
    "\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\r\n\005pitch\030\004 \001(\002\022\013"
    "\n\003yaw\030\005 \001(\002\022\014\n\004roll\030\006 \001(\002\"\317\001\n\035BEV_boundi"
    "ng_box_cord_request\022\025\n\rleft_bottom_x\030\001 \001"
    "(\002\022\025\n\rleft_bottom_y\030\002 \001(\002\022\022\n\nleft_top_x\030"
    "\003 \001(\002\022\022\n\nleft_top_y\030\004 \001(\002\022\023\n\013right_top_x"
    "\030\005 \001(\002\022\023\n\013right_top_y\030\006 \001(\002\022\026\n\016right_bot"
    "tom_x\030\007 \001(\002\022\026\n\016right_bottom_y\030\010 \001(\002\"\036\n\014e"
    "mpty_return\022\016\n\006result\030\001 \001(\0022;\n\016image_tra"
    "nsfer\022)\n\tsend_data\022\r.request_data\032\r.empt"
    "y_returnb\006proto3"
};
static ::absl::once_flag descriptor_table_ipc_5fconfigs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ipc_5fconfigs_2eproto = {
    false,
    false,
    616,
    descriptor_table_protodef_ipc_5fconfigs_2eproto,
    "ipc_configs.proto",
    &descriptor_table_ipc_5fconfigs_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_ipc_5fconfigs_2eproto::offsets,
    file_level_metadata_ipc_5fconfigs_2eproto,
    file_level_enum_descriptors_ipc_5fconfigs_2eproto,
    file_level_service_descriptors_ipc_5fconfigs_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ipc_5fconfigs_2eproto_getter() {
  return &descriptor_table_ipc_5fconfigs_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ipc_5fconfigs_2eproto(&descriptor_table_ipc_5fconfigs_2eproto);
// ===================================================================

class request_data::_Internal {
 public:
  using HasBits = decltype(std::declval<request_data>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(request_data, _impl_._has_bits_);
  static const ::image_request& image_data(const request_data* msg);
  static void set_has_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::transform_request& car_transform(const request_data* msg);
  static void set_has_car_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::BEV_bounding_box_cord_request& bev_bounding_box_cord(const request_data* msg);
  static void set_has_bev_bounding_box_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::image_request& request_data::_Internal::image_data(const request_data* msg) {
  return *msg->_impl_.image_data_;
}
const ::transform_request& request_data::_Internal::car_transform(const request_data* msg) {
  return *msg->_impl_.car_transform_;
}
const ::BEV_bounding_box_cord_request& request_data::_Internal::bev_bounding_box_cord(const request_data* msg) {
  return *msg->_impl_.bev_bounding_box_cord_;
}
request_data::request_data(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:request_data)
}
request_data::request_data(const request_data& from) : ::google::protobuf::Message() {
  request_data* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.image_data_){nullptr},
      decltype(_impl_.car_transform_){nullptr},
      decltype(_impl_.bev_bounding_box_cord_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.image_data_ = new ::image_request(*from._impl_.image_data_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.car_transform_ = new ::transform_request(*from._impl_.car_transform_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.bev_bounding_box_cord_ = new ::BEV_bounding_box_cord_request(*from._impl_.bev_bounding_box_cord_);
  }

  // @@protoc_insertion_point(copy_constructor:request_data)
}
inline void request_data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.image_data_){nullptr},
      decltype(_impl_.car_transform_){nullptr},
      decltype(_impl_.bev_bounding_box_cord_){nullptr},
  };
}
request_data::~request_data() {
  // @@protoc_insertion_point(destructor:request_data)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void request_data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_data_;
  if (this != internal_default_instance()) delete _impl_.car_transform_;
  if (this != internal_default_instance()) delete _impl_.bev_bounding_box_cord_;
}
void request_data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void request_data::Clear() {
// @@protoc_insertion_point(message_clear_start:request_data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.image_data_ != nullptr);
      _impl_.image_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.car_transform_ != nullptr);
      _impl_.car_transform_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.bev_bounding_box_cord_ != nullptr);
      _impl_.bev_bounding_box_cord_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* request_data::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> request_data::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(request_data, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_request_data_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .image_request image_data = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(request_data, _impl_.image_data_)}},
    // .transform_request car_transform = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(request_data, _impl_.car_transform_)}},
    // .BEV_bounding_box_cord_request BEV_bounding_box_cord = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(request_data, _impl_.bev_bounding_box_cord_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .image_request image_data = 1;
    {PROTOBUF_FIELD_OFFSET(request_data, _impl_.image_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .transform_request car_transform = 2;
    {PROTOBUF_FIELD_OFFSET(request_data, _impl_.car_transform_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .BEV_bounding_box_cord_request BEV_bounding_box_cord = 3;
    {PROTOBUF_FIELD_OFFSET(request_data, _impl_.bev_bounding_box_cord_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::image_request>()},
    {::_pbi::TcParser::GetTable<::transform_request>()},
    {::_pbi::TcParser::GetTable<::BEV_bounding_box_cord_request>()},
  }}, {{
  }},
};

::uint8_t* request_data::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:request_data)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .image_request image_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image_data(this),
        _Internal::image_data(this).GetCachedSize(), target, stream);
  }

  // .transform_request car_transform = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::car_transform(this),
        _Internal::car_transform(this).GetCachedSize(), target, stream);
  }

  // .BEV_bounding_box_cord_request BEV_bounding_box_cord = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::bev_bounding_box_cord(this),
        _Internal::bev_bounding_box_cord(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:request_data)
  return target;
}

::size_t request_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:request_data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .image_request image_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.image_data_);
    }

    // .transform_request car_transform = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.car_transform_);
    }

    // .BEV_bounding_box_cord_request BEV_bounding_box_cord = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.bev_bounding_box_cord_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData request_data::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    request_data::MergeImpl
};
const ::google::protobuf::Message::ClassData*request_data::GetClassData() const { return &_class_data_; }


void request_data::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<request_data*>(&to_msg);
  auto& from = static_cast<const request_data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:request_data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_image_data()->::image_request::MergeFrom(
          from._internal_image_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_car_transform()->::transform_request::MergeFrom(
          from._internal_car_transform());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_bev_bounding_box_cord()->::BEV_bounding_box_cord_request::MergeFrom(
          from._internal_bev_bounding_box_cord());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void request_data::CopyFrom(const request_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:request_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool request_data::IsInitialized() const {
  return true;
}

void request_data::InternalSwap(request_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(request_data, _impl_.bev_bounding_box_cord_)
      + sizeof(request_data::_impl_.bev_bounding_box_cord_)
      - PROTOBUF_FIELD_OFFSET(request_data, _impl_.image_data_)>(
          reinterpret_cast<char*>(&_impl_.image_data_),
          reinterpret_cast<char*>(&other->_impl_.image_data_));
}

::google::protobuf::Metadata request_data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipc_5fconfigs_2eproto_getter, &descriptor_table_ipc_5fconfigs_2eproto_once,
      file_level_metadata_ipc_5fconfigs_2eproto[0]);
}
// ===================================================================

class image_request::_Internal {
 public:
};

image_request::image_request(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_request)
}
image_request::image_request(const image_request& from) : ::google::protobuf::Message() {
  image_request* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:image_request)
}
inline void image_request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
image_request::~image_request() {
  // @@protoc_insertion_point(destructor:image_request)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void image_request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}
void image_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void image_request::Clear() {
// @@protoc_insertion_point(message_clear_start:image_request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* image_request::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> image_request::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_image_request_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float data = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(image_request, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float data = 1;
    {PROTOBUF_FIELD_OFFSET(image_request, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* image_request::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:image_request)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_request)
  return target;
}

::size_t image_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_data_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData image_request::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    image_request::MergeImpl
};
const ::google::protobuf::Message::ClassData*image_request::GetClassData() const { return &_class_data_; }


void image_request::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<image_request*>(&to_msg);
  auto& from = static_cast<const image_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:image_request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void image_request::CopyFrom(const image_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool image_request::IsInitialized() const {
  return true;
}

void image_request::InternalSwap(image_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata image_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipc_5fconfigs_2eproto_getter, &descriptor_table_ipc_5fconfigs_2eproto_once,
      file_level_metadata_ipc_5fconfigs_2eproto[1]);
}
// ===================================================================

class transform_request::_Internal {
 public:
};

transform_request::transform_request(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:transform_request)
}
transform_request::transform_request(const transform_request& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transform_request)
}
inline void transform_request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      decltype(_impl_.z_){0},
      decltype(_impl_.pitch_){0},
      decltype(_impl_.yaw_){0},
      decltype(_impl_.roll_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
transform_request::~transform_request() {
  // @@protoc_insertion_point(destructor:transform_request)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void transform_request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void transform_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void transform_request::Clear() {
// @@protoc_insertion_point(message_clear_start:transform_request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.roll_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.roll_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* transform_request::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> transform_request::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_transform_request_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(transform_request, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(transform_request, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(transform_request, _impl_.z_)}},
    // float pitch = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(transform_request, _impl_.pitch_)}},
    // float yaw = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(transform_request, _impl_.yaw_)}},
    // float roll = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(transform_request, _impl_.roll_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(transform_request, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(transform_request, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(transform_request, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch = 4;
    {PROTOBUF_FIELD_OFFSET(transform_request, _impl_.pitch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw = 5;
    {PROTOBUF_FIELD_OFFSET(transform_request, _impl_.yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float roll = 6;
    {PROTOBUF_FIELD_OFFSET(transform_request, _impl_.roll_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* transform_request::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transform_request)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z(), target);
  }

  // float pitch = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_pitch(), target);
  }

  // float yaw = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_yaw(), target);
  }

  // float roll = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  ::uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform_request)
  return target;
}

::size_t transform_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform_request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  // float pitch = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 5;
  }

  // float yaw = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 5;
  }

  // float roll = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  ::uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData transform_request::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    transform_request::MergeImpl
};
const ::google::protobuf::Message::ClassData*transform_request::GetClassData() const { return &_class_data_; }


void transform_request::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<transform_request*>(&to_msg);
  auto& from = static_cast<const transform_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transform_request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  ::uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void transform_request::CopyFrom(const transform_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool transform_request::IsInitialized() const {
  return true;
}

void transform_request::InternalSwap(transform_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transform_request, _impl_.roll_)
      + sizeof(transform_request::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(transform_request, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata transform_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipc_5fconfigs_2eproto_getter, &descriptor_table_ipc_5fconfigs_2eproto_once,
      file_level_metadata_ipc_5fconfigs_2eproto[2]);
}
// ===================================================================

class BEV_bounding_box_cord_request::_Internal {
 public:
};

BEV_bounding_box_cord_request::BEV_bounding_box_cord_request(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:BEV_bounding_box_cord_request)
}
BEV_bounding_box_cord_request::BEV_bounding_box_cord_request(const BEV_bounding_box_cord_request& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BEV_bounding_box_cord_request)
}
inline void BEV_bounding_box_cord_request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.left_bottom_x_){0},
      decltype(_impl_.left_bottom_y_){0},
      decltype(_impl_.left_top_x_){0},
      decltype(_impl_.left_top_y_){0},
      decltype(_impl_.right_top_x_){0},
      decltype(_impl_.right_top_y_){0},
      decltype(_impl_.right_bottom_x_){0},
      decltype(_impl_.right_bottom_y_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
BEV_bounding_box_cord_request::~BEV_bounding_box_cord_request() {
  // @@protoc_insertion_point(destructor:BEV_bounding_box_cord_request)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BEV_bounding_box_cord_request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void BEV_bounding_box_cord_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BEV_bounding_box_cord_request::Clear() {
// @@protoc_insertion_point(message_clear_start:BEV_bounding_box_cord_request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.left_bottom_x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.right_bottom_y_) -
      reinterpret_cast<char*>(&_impl_.left_bottom_x_)) + sizeof(_impl_.right_bottom_y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BEV_bounding_box_cord_request::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> BEV_bounding_box_cord_request::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BEV_bounding_box_cord_request_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float right_bottom_y = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.right_bottom_y_)}},
    // float left_bottom_x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.left_bottom_x_)}},
    // float left_bottom_y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.left_bottom_y_)}},
    // float left_top_x = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.left_top_x_)}},
    // float left_top_y = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.left_top_y_)}},
    // float right_top_x = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.right_top_x_)}},
    // float right_top_y = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.right_top_y_)}},
    // float right_bottom_x = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.right_bottom_x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float left_bottom_x = 1;
    {PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.left_bottom_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float left_bottom_y = 2;
    {PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.left_bottom_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float left_top_x = 3;
    {PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.left_top_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float left_top_y = 4;
    {PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.left_top_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float right_top_x = 5;
    {PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.right_top_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float right_top_y = 6;
    {PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.right_top_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float right_bottom_x = 7;
    {PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.right_bottom_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float right_bottom_y = 8;
    {PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.right_bottom_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BEV_bounding_box_cord_request::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BEV_bounding_box_cord_request)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float left_bottom_x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_bottom_x = this->_internal_left_bottom_x();
  ::uint32_t raw_left_bottom_x;
  memcpy(&raw_left_bottom_x, &tmp_left_bottom_x, sizeof(tmp_left_bottom_x));
  if (raw_left_bottom_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_left_bottom_x(), target);
  }

  // float left_bottom_y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_bottom_y = this->_internal_left_bottom_y();
  ::uint32_t raw_left_bottom_y;
  memcpy(&raw_left_bottom_y, &tmp_left_bottom_y, sizeof(tmp_left_bottom_y));
  if (raw_left_bottom_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_left_bottom_y(), target);
  }

  // float left_top_x = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_top_x = this->_internal_left_top_x();
  ::uint32_t raw_left_top_x;
  memcpy(&raw_left_top_x, &tmp_left_top_x, sizeof(tmp_left_top_x));
  if (raw_left_top_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_left_top_x(), target);
  }

  // float left_top_y = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_top_y = this->_internal_left_top_y();
  ::uint32_t raw_left_top_y;
  memcpy(&raw_left_top_y, &tmp_left_top_y, sizeof(tmp_left_top_y));
  if (raw_left_top_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_left_top_y(), target);
  }

  // float right_top_x = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_top_x = this->_internal_right_top_x();
  ::uint32_t raw_right_top_x;
  memcpy(&raw_right_top_x, &tmp_right_top_x, sizeof(tmp_right_top_x));
  if (raw_right_top_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_right_top_x(), target);
  }

  // float right_top_y = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_top_y = this->_internal_right_top_y();
  ::uint32_t raw_right_top_y;
  memcpy(&raw_right_top_y, &tmp_right_top_y, sizeof(tmp_right_top_y));
  if (raw_right_top_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_right_top_y(), target);
  }

  // float right_bottom_x = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_bottom_x = this->_internal_right_bottom_x();
  ::uint32_t raw_right_bottom_x;
  memcpy(&raw_right_bottom_x, &tmp_right_bottom_x, sizeof(tmp_right_bottom_x));
  if (raw_right_bottom_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_right_bottom_x(), target);
  }

  // float right_bottom_y = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_bottom_y = this->_internal_right_bottom_y();
  ::uint32_t raw_right_bottom_y;
  memcpy(&raw_right_bottom_y, &tmp_right_bottom_y, sizeof(tmp_right_bottom_y));
  if (raw_right_bottom_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_right_bottom_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BEV_bounding_box_cord_request)
  return target;
}

::size_t BEV_bounding_box_cord_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BEV_bounding_box_cord_request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float left_bottom_x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_bottom_x = this->_internal_left_bottom_x();
  ::uint32_t raw_left_bottom_x;
  memcpy(&raw_left_bottom_x, &tmp_left_bottom_x, sizeof(tmp_left_bottom_x));
  if (raw_left_bottom_x != 0) {
    total_size += 5;
  }

  // float left_bottom_y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_bottom_y = this->_internal_left_bottom_y();
  ::uint32_t raw_left_bottom_y;
  memcpy(&raw_left_bottom_y, &tmp_left_bottom_y, sizeof(tmp_left_bottom_y));
  if (raw_left_bottom_y != 0) {
    total_size += 5;
  }

  // float left_top_x = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_top_x = this->_internal_left_top_x();
  ::uint32_t raw_left_top_x;
  memcpy(&raw_left_top_x, &tmp_left_top_x, sizeof(tmp_left_top_x));
  if (raw_left_top_x != 0) {
    total_size += 5;
  }

  // float left_top_y = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_top_y = this->_internal_left_top_y();
  ::uint32_t raw_left_top_y;
  memcpy(&raw_left_top_y, &tmp_left_top_y, sizeof(tmp_left_top_y));
  if (raw_left_top_y != 0) {
    total_size += 5;
  }

  // float right_top_x = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_top_x = this->_internal_right_top_x();
  ::uint32_t raw_right_top_x;
  memcpy(&raw_right_top_x, &tmp_right_top_x, sizeof(tmp_right_top_x));
  if (raw_right_top_x != 0) {
    total_size += 5;
  }

  // float right_top_y = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_top_y = this->_internal_right_top_y();
  ::uint32_t raw_right_top_y;
  memcpy(&raw_right_top_y, &tmp_right_top_y, sizeof(tmp_right_top_y));
  if (raw_right_top_y != 0) {
    total_size += 5;
  }

  // float right_bottom_x = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_bottom_x = this->_internal_right_bottom_x();
  ::uint32_t raw_right_bottom_x;
  memcpy(&raw_right_bottom_x, &tmp_right_bottom_x, sizeof(tmp_right_bottom_x));
  if (raw_right_bottom_x != 0) {
    total_size += 5;
  }

  // float right_bottom_y = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_bottom_y = this->_internal_right_bottom_y();
  ::uint32_t raw_right_bottom_y;
  memcpy(&raw_right_bottom_y, &tmp_right_bottom_y, sizeof(tmp_right_bottom_y));
  if (raw_right_bottom_y != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BEV_bounding_box_cord_request::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BEV_bounding_box_cord_request::MergeImpl
};
const ::google::protobuf::Message::ClassData*BEV_bounding_box_cord_request::GetClassData() const { return &_class_data_; }


void BEV_bounding_box_cord_request::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BEV_bounding_box_cord_request*>(&to_msg);
  auto& from = static_cast<const BEV_bounding_box_cord_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BEV_bounding_box_cord_request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_bottom_x = from._internal_left_bottom_x();
  ::uint32_t raw_left_bottom_x;
  memcpy(&raw_left_bottom_x, &tmp_left_bottom_x, sizeof(tmp_left_bottom_x));
  if (raw_left_bottom_x != 0) {
    _this->_internal_set_left_bottom_x(from._internal_left_bottom_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_bottom_y = from._internal_left_bottom_y();
  ::uint32_t raw_left_bottom_y;
  memcpy(&raw_left_bottom_y, &tmp_left_bottom_y, sizeof(tmp_left_bottom_y));
  if (raw_left_bottom_y != 0) {
    _this->_internal_set_left_bottom_y(from._internal_left_bottom_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_top_x = from._internal_left_top_x();
  ::uint32_t raw_left_top_x;
  memcpy(&raw_left_top_x, &tmp_left_top_x, sizeof(tmp_left_top_x));
  if (raw_left_top_x != 0) {
    _this->_internal_set_left_top_x(from._internal_left_top_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_left_top_y = from._internal_left_top_y();
  ::uint32_t raw_left_top_y;
  memcpy(&raw_left_top_y, &tmp_left_top_y, sizeof(tmp_left_top_y));
  if (raw_left_top_y != 0) {
    _this->_internal_set_left_top_y(from._internal_left_top_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_top_x = from._internal_right_top_x();
  ::uint32_t raw_right_top_x;
  memcpy(&raw_right_top_x, &tmp_right_top_x, sizeof(tmp_right_top_x));
  if (raw_right_top_x != 0) {
    _this->_internal_set_right_top_x(from._internal_right_top_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_top_y = from._internal_right_top_y();
  ::uint32_t raw_right_top_y;
  memcpy(&raw_right_top_y, &tmp_right_top_y, sizeof(tmp_right_top_y));
  if (raw_right_top_y != 0) {
    _this->_internal_set_right_top_y(from._internal_right_top_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_bottom_x = from._internal_right_bottom_x();
  ::uint32_t raw_right_bottom_x;
  memcpy(&raw_right_bottom_x, &tmp_right_bottom_x, sizeof(tmp_right_bottom_x));
  if (raw_right_bottom_x != 0) {
    _this->_internal_set_right_bottom_x(from._internal_right_bottom_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_bottom_y = from._internal_right_bottom_y();
  ::uint32_t raw_right_bottom_y;
  memcpy(&raw_right_bottom_y, &tmp_right_bottom_y, sizeof(tmp_right_bottom_y));
  if (raw_right_bottom_y != 0) {
    _this->_internal_set_right_bottom_y(from._internal_right_bottom_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BEV_bounding_box_cord_request::CopyFrom(const BEV_bounding_box_cord_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BEV_bounding_box_cord_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BEV_bounding_box_cord_request::IsInitialized() const {
  return true;
}

void BEV_bounding_box_cord_request::InternalSwap(BEV_bounding_box_cord_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.right_bottom_y_)
      + sizeof(BEV_bounding_box_cord_request::_impl_.right_bottom_y_)
      - PROTOBUF_FIELD_OFFSET(BEV_bounding_box_cord_request, _impl_.left_bottom_x_)>(
          reinterpret_cast<char*>(&_impl_.left_bottom_x_),
          reinterpret_cast<char*>(&other->_impl_.left_bottom_x_));
}

::google::protobuf::Metadata BEV_bounding_box_cord_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipc_5fconfigs_2eproto_getter, &descriptor_table_ipc_5fconfigs_2eproto_once,
      file_level_metadata_ipc_5fconfigs_2eproto[3]);
}
// ===================================================================

class empty_return::_Internal {
 public:
};

empty_return::empty_return(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:empty_return)
}
empty_return::empty_return(const empty_return& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:empty_return)
}
inline void empty_return::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
empty_return::~empty_return() {
  // @@protoc_insertion_point(destructor:empty_return)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void empty_return::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void empty_return::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void empty_return::Clear() {
// @@protoc_insertion_point(message_clear_start:empty_return)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* empty_return::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> empty_return::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_empty_return_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float result = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(empty_return, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float result = 1;
    {PROTOBUF_FIELD_OFFSET(empty_return, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* empty_return::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:empty_return)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float result = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_result = this->_internal_result();
  ::uint32_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:empty_return)
  return target;
}

::size_t empty_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:empty_return)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float result = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_result = this->_internal_result();
  ::uint32_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData empty_return::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    empty_return::MergeImpl
};
const ::google::protobuf::Message::ClassData*empty_return::GetClassData() const { return &_class_data_; }


void empty_return::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<empty_return*>(&to_msg);
  auto& from = static_cast<const empty_return&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:empty_return)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_result = from._internal_result();
  ::uint32_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void empty_return::CopyFrom(const empty_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:empty_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool empty_return::IsInitialized() const {
  return true;
}

void empty_return::InternalSwap(empty_return* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata empty_return::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipc_5fconfigs_2eproto_getter, &descriptor_table_ipc_5fconfigs_2eproto_once,
      file_level_metadata_ipc_5fconfigs_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

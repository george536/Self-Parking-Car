// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc_configs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ipc_5fconfigs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ipc_5fconfigs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ipc_5fconfigs_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ipc_5fconfigs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ipc_5fconfigs_2eproto;
class empty_return;
struct empty_returnDefaultTypeInternal;
extern empty_returnDefaultTypeInternal _empty_return_default_instance_;
class image_request;
struct image_requestDefaultTypeInternal;
extern image_requestDefaultTypeInternal _image_request_default_instance_;
class request_data;
struct request_dataDefaultTypeInternal;
extern request_dataDefaultTypeInternal _request_data_default_instance_;
class transform_request;
struct transform_requestDefaultTypeInternal;
extern transform_requestDefaultTypeInternal _transform_request_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::empty_return* Arena::CreateMaybeMessage<::empty_return>(Arena*);
template <>
::image_request* Arena::CreateMaybeMessage<::image_request>(Arena*);
template <>
::request_data* Arena::CreateMaybeMessage<::request_data>(Arena*);
template <>
::transform_request* Arena::CreateMaybeMessage<::transform_request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE


// ===================================================================


// -------------------------------------------------------------------

class request_data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_data) */ {
 public:
  inline request_data() : request_data(nullptr) {}
  ~request_data() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR request_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  request_data(const request_data& from);
  request_data(request_data&& from) noexcept
    : request_data() {
    *this = ::std::move(from);
  }

  inline request_data& operator=(const request_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline request_data& operator=(request_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const request_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const request_data* internal_default_instance() {
    return reinterpret_cast<const request_data*>(
               &_request_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(request_data& a, request_data& b) {
    a.Swap(&b);
  }
  inline void Swap(request_data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(request_data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  request_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<request_data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const request_data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const request_data& from) {
    request_data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(request_data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "request_data";
  }
  protected:
  explicit request_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageDataFieldNumber = 1,
    kCarTransformFieldNumber = 2,
  };
  // .image_request image_data = 1;
  bool has_image_data() const;
  void clear_image_data() ;
  const ::image_request& image_data() const;
  PROTOBUF_NODISCARD ::image_request* release_image_data();
  ::image_request* mutable_image_data();
  void set_allocated_image_data(::image_request* image_data);
  private:
  const ::image_request& _internal_image_data() const;
  ::image_request* _internal_mutable_image_data();
  public:
  void unsafe_arena_set_allocated_image_data(
      ::image_request* image_data);
  ::image_request* unsafe_arena_release_image_data();
  // .transform_request car_transform = 2;
  bool has_car_transform() const;
  void clear_car_transform() ;
  const ::transform_request& car_transform() const;
  PROTOBUF_NODISCARD ::transform_request* release_car_transform();
  ::transform_request* mutable_car_transform();
  void set_allocated_car_transform(::transform_request* car_transform);
  private:
  const ::transform_request& _internal_car_transform() const;
  ::transform_request* _internal_mutable_car_transform();
  public:
  void unsafe_arena_set_allocated_car_transform(
      ::transform_request* car_transform);
  ::transform_request* unsafe_arena_release_car_transform();
  // @@protoc_insertion_point(class_scope:request_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::image_request* image_data_;
    ::transform_request* car_transform_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ipc_5fconfigs_2eproto;
};// -------------------------------------------------------------------

class image_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:image_request) */ {
 public:
  inline image_request() : image_request(nullptr) {}
  ~image_request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR image_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  image_request(const image_request& from);
  image_request(image_request&& from) noexcept
    : image_request() {
    *this = ::std::move(from);
  }

  inline image_request& operator=(const image_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline image_request& operator=(image_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const image_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const image_request* internal_default_instance() {
    return reinterpret_cast<const image_request*>(
               &_image_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(image_request& a, image_request& b) {
    a.Swap(&b);
  }
  inline void Swap(image_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(image_request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  image_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<image_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const image_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const image_request& from) {
    image_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(image_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "image_request";
  }
  protected:
  explicit image_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_data();

  private:
  float _internal_data(int index) const;
  void _internal_add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:image_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ipc_5fconfigs_2eproto;
};// -------------------------------------------------------------------

class transform_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transform_request) */ {
 public:
  inline transform_request() : transform_request(nullptr) {}
  ~transform_request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR transform_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transform_request(const transform_request& from);
  transform_request(transform_request&& from) noexcept
    : transform_request() {
    *this = ::std::move(from);
  }

  inline transform_request& operator=(const transform_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline transform_request& operator=(transform_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transform_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const transform_request* internal_default_instance() {
    return reinterpret_cast<const transform_request*>(
               &_transform_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(transform_request& a, transform_request& b) {
    a.Swap(&b);
  }
  inline void Swap(transform_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transform_request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  transform_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<transform_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transform_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const transform_request& from) {
    transform_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transform_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transform_request";
  }
  protected:
  explicit transform_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kPitchFieldNumber = 4,
    kYawFieldNumber = 5,
    kRollFieldNumber = 6,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // float pitch = 4;
  void clear_pitch() ;
  float pitch() const;
  void set_pitch(float value);

  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);

  public:
  // float yaw = 5;
  void clear_yaw() ;
  float yaw() const;
  void set_yaw(float value);

  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);

  public:
  // float roll = 6;
  void clear_roll() ;
  float roll() const;
  void set_roll(float value);

  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);

  public:
  // @@protoc_insertion_point(class_scope:transform_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float pitch_;
    float yaw_;
    float roll_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ipc_5fconfigs_2eproto;
};// -------------------------------------------------------------------

class empty_return final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empty_return) */ {
 public:
  inline empty_return() : empty_return(nullptr) {}
  ~empty_return() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR empty_return(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  empty_return(const empty_return& from);
  empty_return(empty_return&& from) noexcept
    : empty_return() {
    *this = ::std::move(from);
  }

  inline empty_return& operator=(const empty_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline empty_return& operator=(empty_return&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const empty_return& default_instance() {
    return *internal_default_instance();
  }
  static inline const empty_return* internal_default_instance() {
    return reinterpret_cast<const empty_return*>(
               &_empty_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(empty_return& a, empty_return& b) {
    a.Swap(&b);
  }
  inline void Swap(empty_return* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(empty_return* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  empty_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<empty_return>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const empty_return& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const empty_return& from) {
    empty_return::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(empty_return* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "empty_return";
  }
  protected:
  explicit empty_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // float result = 1;
  void clear_result() ;
  float result() const;
  void set_result(float value);

  private:
  float _internal_result() const;
  void _internal_set_result(float value);

  public:
  // @@protoc_insertion_point(class_scope:empty_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ipc_5fconfigs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// request_data

// .image_request image_data = 1;
inline bool request_data::has_image_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_data_ != nullptr);
  return value;
}
inline void request_data::clear_image_data() {
  if (_impl_.image_data_ != nullptr) _impl_.image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::image_request& request_data::_internal_image_data() const {
  const ::image_request* p = _impl_.image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::image_request&>(
      ::_image_request_default_instance_);
}
inline const ::image_request& request_data::image_data() const {
  // @@protoc_insertion_point(field_get:request_data.image_data)
  return _internal_image_data();
}
inline void request_data::unsafe_arena_set_allocated_image_data(
    ::image_request* image_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_data_);
  }
  _impl_.image_data_ = image_data;
  if (image_data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:request_data.image_data)
}
inline ::image_request* request_data::release_image_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::image_request* temp = _impl_.image_data_;
  _impl_.image_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::image_request* request_data::unsafe_arena_release_image_data() {
  // @@protoc_insertion_point(field_release:request_data.image_data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::image_request* temp = _impl_.image_data_;
  _impl_.image_data_ = nullptr;
  return temp;
}
inline ::image_request* request_data::_internal_mutable_image_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::image_request>(GetArenaForAllocation());
    _impl_.image_data_ = p;
  }
  return _impl_.image_data_;
}
inline ::image_request* request_data::mutable_image_data() {
  ::image_request* _msg = _internal_mutable_image_data();
  // @@protoc_insertion_point(field_mutable:request_data.image_data)
  return _msg;
}
inline void request_data::set_allocated_image_data(::image_request* image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_data_;
  }
  if (image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_data);
    if (message_arena != submessage_arena) {
      image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.image_data_ = image_data;
  // @@protoc_insertion_point(field_set_allocated:request_data.image_data)
}

// .transform_request car_transform = 2;
inline bool request_data::has_car_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.car_transform_ != nullptr);
  return value;
}
inline void request_data::clear_car_transform() {
  if (_impl_.car_transform_ != nullptr) _impl_.car_transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::transform_request& request_data::_internal_car_transform() const {
  const ::transform_request* p = _impl_.car_transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::transform_request&>(
      ::_transform_request_default_instance_);
}
inline const ::transform_request& request_data::car_transform() const {
  // @@protoc_insertion_point(field_get:request_data.car_transform)
  return _internal_car_transform();
}
inline void request_data::unsafe_arena_set_allocated_car_transform(
    ::transform_request* car_transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.car_transform_);
  }
  _impl_.car_transform_ = car_transform;
  if (car_transform) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:request_data.car_transform)
}
inline ::transform_request* request_data::release_car_transform() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transform_request* temp = _impl_.car_transform_;
  _impl_.car_transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transform_request* request_data::unsafe_arena_release_car_transform() {
  // @@protoc_insertion_point(field_release:request_data.car_transform)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transform_request* temp = _impl_.car_transform_;
  _impl_.car_transform_ = nullptr;
  return temp;
}
inline ::transform_request* request_data::_internal_mutable_car_transform() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.car_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::transform_request>(GetArenaForAllocation());
    _impl_.car_transform_ = p;
  }
  return _impl_.car_transform_;
}
inline ::transform_request* request_data::mutable_car_transform() {
  ::transform_request* _msg = _internal_mutable_car_transform();
  // @@protoc_insertion_point(field_mutable:request_data.car_transform)
  return _msg;
}
inline void request_data::set_allocated_car_transform(::transform_request* car_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.car_transform_;
  }
  if (car_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(car_transform);
    if (message_arena != submessage_arena) {
      car_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, car_transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.car_transform_ = car_transform;
  // @@protoc_insertion_point(field_set_allocated:request_data.car_transform)
}

// -------------------------------------------------------------------

// image_request

// repeated float data = 1;
inline int image_request::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int image_request::data_size() const {
  return _internal_data_size();
}
inline void image_request::clear_data() {
  _internal_mutable_data()->Clear();
}
inline float image_request::data(int index) const {
  // @@protoc_insertion_point(field_get:image_request.data)
  return _internal_data(index);
}
inline void image_request::set_data(int index, float value) {
  _internal_mutable_data()->Set(index, value);
  // @@protoc_insertion_point(field_set:image_request.data)
}
inline void image_request::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:image_request.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& image_request::data() const {
  // @@protoc_insertion_point(field_list:image_request.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* image_request::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:image_request.data)
  return _internal_mutable_data();
}

inline float image_request::_internal_data(int index) const {
  return _internal_data().Get(index);
}
inline void image_request::_internal_add_data(float value) {
  _internal_mutable_data()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& image_request::_internal_data() const {
  return _impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* image_request::_internal_mutable_data() {
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// transform_request

// float x = 1;
inline void transform_request::clear_x() {
  _impl_.x_ = 0;
}
inline float transform_request::x() const {
  // @@protoc_insertion_point(field_get:transform_request.x)
  return _internal_x();
}
inline void transform_request::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:transform_request.x)
}
inline float transform_request::_internal_x() const {
  return _impl_.x_;
}
inline void transform_request::_internal_set_x(float value) {
  ;
  _impl_.x_ = value;
}

// float y = 2;
inline void transform_request::clear_y() {
  _impl_.y_ = 0;
}
inline float transform_request::y() const {
  // @@protoc_insertion_point(field_get:transform_request.y)
  return _internal_y();
}
inline void transform_request::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:transform_request.y)
}
inline float transform_request::_internal_y() const {
  return _impl_.y_;
}
inline void transform_request::_internal_set_y(float value) {
  ;
  _impl_.y_ = value;
}

// float z = 3;
inline void transform_request::clear_z() {
  _impl_.z_ = 0;
}
inline float transform_request::z() const {
  // @@protoc_insertion_point(field_get:transform_request.z)
  return _internal_z();
}
inline void transform_request::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:transform_request.z)
}
inline float transform_request::_internal_z() const {
  return _impl_.z_;
}
inline void transform_request::_internal_set_z(float value) {
  ;
  _impl_.z_ = value;
}

// float pitch = 4;
inline void transform_request::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float transform_request::pitch() const {
  // @@protoc_insertion_point(field_get:transform_request.pitch)
  return _internal_pitch();
}
inline void transform_request::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:transform_request.pitch)
}
inline float transform_request::_internal_pitch() const {
  return _impl_.pitch_;
}
inline void transform_request::_internal_set_pitch(float value) {
  ;
  _impl_.pitch_ = value;
}

// float yaw = 5;
inline void transform_request::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float transform_request::yaw() const {
  // @@protoc_insertion_point(field_get:transform_request.yaw)
  return _internal_yaw();
}
inline void transform_request::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:transform_request.yaw)
}
inline float transform_request::_internal_yaw() const {
  return _impl_.yaw_;
}
inline void transform_request::_internal_set_yaw(float value) {
  ;
  _impl_.yaw_ = value;
}

// float roll = 6;
inline void transform_request::clear_roll() {
  _impl_.roll_ = 0;
}
inline float transform_request::roll() const {
  // @@protoc_insertion_point(field_get:transform_request.roll)
  return _internal_roll();
}
inline void transform_request::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:transform_request.roll)
}
inline float transform_request::_internal_roll() const {
  return _impl_.roll_;
}
inline void transform_request::_internal_set_roll(float value) {
  ;
  _impl_.roll_ = value;
}

// -------------------------------------------------------------------

// empty_return

// float result = 1;
inline void empty_return::clear_result() {
  _impl_.result_ = 0;
}
inline float empty_return::result() const {
  // @@protoc_insertion_point(field_get:empty_return.result)
  return _internal_result();
}
inline void empty_return::set_result(float value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:empty_return.result)
}
inline float empty_return::_internal_result() const {
  return _impl_.result_;
}
inline void empty_return::_internal_set_result(float value) {
  ;
  _impl_.result_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ipc_5fconfigs_2eproto_2epb_2eh
